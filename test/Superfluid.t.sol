// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/SuperfluidExploiter.sol";

contract SuperfluidTest is Test {
    ISuperToken private constant QIx = ISuperToken(0xe1cA10e6a10c0F72B74dF6b7339912BaBfB1f8B5);
    ISuperToken private constant ETHx = ISuperToken(0x27e1e4E6BC79D93032abef01025811B7E4727e85);
    ISuperToken private constant USDCx = ISuperToken(0xCAa7349CEA390F89641fe306D93591f87595dc1F);
    ISuperToken private constant SDTx = ISuperToken(0x12c294107772b10815307c05989DABD71C21670e);
    ISuperToken private constant MOCAx = ISuperToken(0x1ADcA32B906883e474aEbcBA5708B41F3645f941);
    ISuperToken private constant STACKx = ISuperToken(0xcAE73e9EeE8a01b8B7F94b59133e3821F21470AB);
    ISuperToken private constant MATICx = ISuperToken(0x3aD736904E9e65189c3000c7DD2c8AC8bB7cD4e3);
    ISuperToken private constant sdam3CRVx = ISuperToken(0x8ef4F0C0753048a39B4Bc4eB3f545Fdae00618B7);

    SuperfluidExploiter exploiter;

    function setUp() public {
        vm.createSelectFork(vm.rpcUrl("polygon"), 24684713);

        exploiter = new SuperfluidExploiter();
    }

    function testExploit() public {
        exploiter.exploit();

        assertTrue(QIx.balanceOf(address(exploiter)) > 19_387_874e18);
        assertTrue(ETHx.balanceOf(address(exploiter)) > 24e18);
        assertTrue(USDCx.balanceOf(address(exploiter)) > 562_834e18);
        assertTrue(SDTx.balanceOf(address(exploiter)) > 44_581e18);
        assertTrue(MOCAx.balanceOf(address(exploiter)) > 1_507_930e18);
        assertTrue(STACKx.balanceOf(address(exploiter)) > 23_653e18);
        assertTrue(MATICx.balanceOf(address(exploiter)) > 11_007e18);
        assertTrue(sdam3CRVx.balanceOf(address(exploiter)) > 39_357e18);
    }
}
