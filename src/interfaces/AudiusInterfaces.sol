// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
import "./TokenInterfaces.sol";

interface IGovernance {
    enum Outcome {
        InProgress,
        Rejected,
        ApprovedExecuted,
        QuorumNotMet,
        ApprovedExecutionFailed,
        Evaluating,
        Vetoed,
        TargetContractAddressChanged,
        TargetContractCodeHashChanged
    }
    enum Vote {None, No, Yes}
    function initialize(
        address _registryAddress,
        uint256 _votingPeriod,
        uint256 _executionDelay,
        uint256 _votingQuorumPercent,
        uint16 _maxInProgressProposals,
        address _guardianAddress
    ) external;
    function evaluateProposalOutcome(uint256 _proposalId) external returns (Outcome);
    function submitProposal(
        bytes32 _targetContractRegistryKey,
        uint256 _callValue,
        string calldata _functionSignature,
        bytes calldata _callData,
        string calldata _name,
        string calldata _description
    ) external returns (uint256);
    function submitVote(uint256 _proposalId, Vote _vote) external;
    function getAudiusProxyAdminAddress() external view returns (address);
}

interface IStaking {
    function initialize(
        address _tokenAddress,
        address _governanceAddress) external;
    function totalStakedAt(uint256 _blockNumber) external view returns (uint256);
}

interface IDelegateManager {
    function initialize (
        address _tokenAddress,
        address _governanceAddress,
        uint256 _undelegateLockupDuration) external;
    function setServiceProviderFactoryAddress(address _spFactory) external;
     function delegateStake(
        address _targetSP,
        uint256 _amount
    ) external returns (uint256);
}
